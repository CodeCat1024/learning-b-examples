-- 聚合查询：查询过程中，表的行和行之间进行一定的运算（不是列和列）依赖聚合函数（SQL里面的库函数）

--  count
select count(*) from student;

-- sum（只对数字有效，会自动跳过结果为null的行）
select sum(chinese) from student;

-- avg
select avg(chinese) from student;

select avg(chinese + math + english) from student;

-- max
select max(chinese) from student;

-- min
select min(chinese) from student;

-- groud by

-- 测试数据
create table emp (
	id int,
	name varchar(20),
	role varchar(20),
	salary int
);

insert into emp values
(1, "孙悟空", "讲师", 10000),
(2, "猪悟能", "讲师", 11000),
(3, "沙悟净", "讲师", 11000),
(4, "刘玄德", "学管师", 11000),
(5, "曹孟德", "学管师", 11000),
(6, "太上老君", "老板", 11000),
(7, "如来佛祖", "老板", 11000);

-- group by（求出每个岗位的平均薪资）
select role, avg(salary) from emp group by role;

-- group by（求出每个岗位的平均薪资（除去孙悟空的薪资）） 分组前
select role, avg(salary) from emp where name !="孙悟空" group by role;

-- group by（求出每个岗位的平均薪资（除去老板的薪资）） 分组后
select role, avg(salary) from emp group by role having role != "老板";










--  多表查询（联合查询）：基于笛卡尔积 + 条件进行查询询

-- 联合查询（多表查询）：把多个表联合到一起进行查询，针对子表进行插入数据 / 修改数据，都需要去父表中查询一次，当父表的数据太多时，开销就会很大。为了让查询操作更快，可以给父表对应的列设置“索引”，相当于不再遍历，而是利用特定的结构加快速度

-- 分为内连接，外连接，自连接，子查询，合并查询

--  笛卡尔积：将两张表的记录尽可能排列组合出N中情况，也就是得到了更大的表，列数是两表之和，行数是两表之积




-- 内连接（inner join)

-- 查询许仙同学的成绩
select student.name, score.score from stduent, score where student.id = score.student_id and student.name = "许仙";

select student.name, score.score from stduent join score on student.id = score.student_id and student.name = "许仙";


-- 查询所有同学的总成绩及同学的个人信息
select student.name, sum(score.score) from student, score where student.id = score.student_id groud by student.id;


-- 查询所有同学的成绩及同学的个人信息
select student.name, course.name, score.score from student, course, score where student.id = score.student_id and course.id = score.course_id;





-- 外连接（join）

-- 测试数据
create table student(
	id int,
	name varchar(20)
);
create table score(
	student_id int,
	score int
);
insert into student values(1, "张三"), (2, "李四"), (3, "王五");
insert into score values (1, 90), (2, 80), (3, 70);


-- 当前情况下，这两张表的数据是一一对应的，所以内连接和外连接的查询结果是相同的
-- select name, score from student join score on student.id = score.student.id;


-- 但如果两个表的数据不是一一对应的话，内连接的结果就只有两个表都有体现的数据

-- update score set student_id = 4 where score = 70;
-- select name, score from student join score on student.id = score.student_id;


-- 左外连接，以左侧的表为准，左侧表中的数据都可以体现出来
-- select name, score from student left join score on student.id = score.student.id;


-- 右外连接，以右侧的表为准，右侧表中的数据都可以体现出来
-- select name, score from student right join score on student.id = score.student.id;





-- 自连接：本质上是把行转成列，自己和自己做笛卡尔积

-- 显示所有计算机原理成绩比Java成绩高的数据
select * from score as s1, score as s2 where s1.student_id = s2.student_id and s1.course_id = 1 and s2.course_id = 3 and s1.score < s2.score;





-- 子查询：把多个查询语句合并到一起

-- 单行子查询：查询与”不想毕业“同学的同班同学
select name from student where classes_id = (select classes_id from student where name = "不想毕业");

-- 多行子查询：查询”语文“或”英语“课程的成绩信息
-- IN关键字
select * from score where course_id in (select id from course where name = "语文" or name = "英文");

-- EXISTS关键字




--  合并查询：把两个查询语句的结果合并在一起

-- 查询id<3，或者名字为“英文”的课程
-- or只能针对一个表，union可以把多个表的查询结果合并（union会自动去重，union all不会去重）
select * from course where id < 3 or name = "英文";
select * from course where id < 3 union select * from course where name = "英文";












