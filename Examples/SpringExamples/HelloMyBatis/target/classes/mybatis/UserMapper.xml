<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--要设置实现接口的具体包加类名-->
<mapper namespace="com.zjt.demo.mapper.UserMapper">

    <!-- 普通操作 -->

    <!-- 根据id查询用户 -->
<!--    <select id="getUserById" resultType="com.zjt.demo.model.UserInfo">-->
<!--        select * from userInfo where id = #{id}-->
<!--    </select>-->

    <!-- 添加用户 -->
    <insert id="add">
        insert into userinfo(username, password, photo) values (#{username}, #{password}, #{photo})
    </insert>

    <!-- 添加用户并返回id -->
    <insert id="addGetId" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into userinfo(username, password, photo) values (#{username}, #{password}, #{photo})
    </insert>

    <!-- 根据用户id修改名称 -->
    <update id="update">
        update userinfo set username=#{username} where id=#{id}
    </update>

    <!-- 根据id删除用户 -->
    <delete id="del">
        delete from userinfo where id=#{id}
    </delete>


    <!-- SQL注入问题 -->

    <!-- 像这种情况如果使用#就会出现SQL注入问题   -->
    <select id="login" resultType="com.zjt.demo.model.UserInfo">
        select * from userinfo where username=#{username} and password=#{password}
        <!-- select * from userinfo where username='${username}' and password= '${password}' -->
    </select>

    <!-- 不过当传递SQL关键字时，就使用${}，而使用预处理就会出错 -->
    <!-- 当不得不使用${}时，一定要在业务代码中对传递过来的值进行安全校验，解决SQL注入问题-->
    <select id="getOrderList" resultType="com.zjt.demo.model.UserInfo">
        select * from userinfo order by createtime ${order}
    </select>

    <!-- 模糊查询：使用#{}报错，而使用${}在业务层的值又不能穷举，不过我们可以使用concat -->
    <select id="getListByName" resultType="com.zjt.demo.model.UserInfo">
        <!-- select * from userinfo where username like '%${username}%'  -->
        select * from userinfo where username like concat('%', #{username}, '%')
    </select>























    <!-- 多表查询：一对一 -->

    <!-- 如果出现数据库字段和对象属性名不同则可以使用resultMap，平时使用resultType就行 -->
    <!-- 还有在进行多表查询的时候也会用到resultMap，这个时候记得要把所有属性写全 -->
<!--    <resultMap id="BaseMap" type="com.zjt.demo.model.UserInfo">-->
<!--        &lt;!&ndash; 主键映射 &ndash;&gt;-->
<!--        <id column="id" property="id"></id>-->
<!--        &lt;!&ndash; 普通属性映射 &ndash;&gt;-->
<!--        <result column="username" property="username"></result>-->
<!--        <result column="password" property="password"></result>-->
<!--        <result column="photo" property="photo"></result>-->
<!--        <result column="createtime" property="createtime"></result>-->
<!--        <result column="updatetime" property="updatetime"></result>-->
<!--        <result column="state" property="state"></result>-->
<!--    </resultMap>-->

    <!-- 根据id查询用户 resultMap版 -->
    <select id="getUserById" resultMap="BaseMap">
        select * from userinfo where id = #{id}
    </select>


    <!-- 多表查询：一对多 -->
    <resultMap id="BaseMap" type="com.zjt.demo.model.UserInfo">
        <!-- 主键映射 -->
        <id column="id" property="id"></id>
        <!-- 普通属性映射 -->
        <result column="username" property="username"></result>
        <result column="password" property="password"></result>
        <result column="photo" property="photo"></result>
        <result column="createtime" property="createtime"></result>
        <result column="updatetime" property="updatetime"></result>
        <result column="state" property="state"></result>
        <collection property="articleInfoList"
                    resultMap="com.zjt.demo.mapper.ArticleMapper.BaseMap"
                    columnPrefix="a_">

        </collection>
    </resultMap>

    <select id="getUserAndArticleByUid" resultMap="BaseMap">
        select u.*,a.id a_id, a.title a_title, a.content a_content,
        a.createtime a_createtime, a.updatetime a_updatetime
        from userinfo u left join articleinfo a on u.id=a.uid where u.id=#{uid}
    </select>

























    <!-- 动态SQL: if标签 -->
    <insert id="add2">
        insert into userinfo (username, password
        <!-- 直接写photo就行了，不需要写userinfo.photo -->
        <if test="photo != null">
            , photo
        </if>
        ) values (#{username}, #{password}
        <if test="photo != null">
            , #{photo}
        </if>
        )
    </insert>


    <!-- 动态SQL：trim标签（主要用来去SQL语句前后多余的字符） -->
    <insert id="add3">
        inset into userinfo
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="photo != null">
                photo
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null">
                #{name},
            </if>
            <if test="password != null">
                #{password},
            </if>
            <if test="photo != null">
                #{photo}
            </if>
        </trim>
    </insert>


    <!-- 动态SQL： where标签 如果没有任何条件，会隐藏where之类的SQL语句，并且前面的and也会去除（所以要把and写到前面） -->
    <select id="getUserById2" resultMap="BaseMap">
        select * from userinfo
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
        </where>
    </select>


    <!-- 动态SQL：set标签 （可以去除最后的逗号）  -->
    <update id="update2">
        update userinfo
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="photo != null">
                photo = #{photo}
            </if>
        </set>
        where id = #{id}
    </update>


    <!-- 动态SQL：foreach标签 对集合进行循环（比方说批量删除的时候） -->
    <delete id="delByIds">
        delete from userinfo where id in 
        <foreach collection="ids" open="(" close=")" item="id" separator=",">
            #{id}
        </foreach>
    </delete>




</mapper>